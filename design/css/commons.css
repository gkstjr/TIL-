/*
    CSS file
    모듈화 시키고 싶은 디자인 코드를 이곳에 작성

    HTML 페이지에서는 다음과 같이 불러온다


*/

@charset "UTF-8";

*{
    box-sizing: border-box;
}

/* 
    컨테이너(Container)
    -특정 화면의 가장 바깥쪽 영역
    -어떤 폭을 가지는 컨테이너를 사용할지 모르므로 대략적으로 미리 준비해둔다.
*/
.container{
    margin:auto;
}
.w100{
    width: 100px;
    
}
.w150{
    width: 150px;
}
.cw200{
    width: 200px;
}
.w250{
    width: 250px;
}
.w300{
    width: 300px;
}

.w350{
    width: 350px;
}
.w400{
    width: 400px;
}
.w450{
    width: 450px;
}
.w500{
    width: 500px;
}
.w550{
    width: 550px;
}
.w600{
    width: 600px;
}
.w650{
    width: 650px;
}
.w700{
    width: 700px;
}
.w750{
    width: 750px;
}
.w800{
    width: 800px;
}
.w850{
    width: 850px;
}
.w900{
    width: 900px;
}
.w950{
    width: 9500px;
}
.w1000{
    width: 1000px;
}
/* 
    컨테이너 내부 줄(디자인)구현
    -정렬을 선택할 수 있어야 한다.
    -상하 간격을 선택할 수 있어야 한다.
    */
.row{
    margin: 10px 0px;

}
.left{
    text-align: left;
}
.center{text-align: center;}
.right{text-align: right;}

.m0{
    margin-top:  0px;
    margin-bottom: 0px;
}
.m10{
    margin-top: 10px;
    margin-bottom: 10px;
}
.m30{
    margin-top: 30px;
    margin-bottom: 30px;
}
.m40{
    margin-top: 40px;
    margin-bottom: 40px;
}
.m50{
    margin-top: 50px;
    margin-bottom: 50px;
}
.img{
    border: 2px solid transparent;
}
.img.img-border{
    border: 2px solid black;
}
.img.img-circle{
    border-radius: 50%;
}
.img.img-round{
    border-radius: 10px;
}
.img.img-blur{
    opacity: 0.4;
}
.img.img-hover{
    opacity: 0.4;
}
/* 선택자 뒤에 :hover가 붙으면 마우스가 올라간 경우의 디자인을 구현 */
.img.img-hover:hover{
    opacity: 1;
}
.img.img-shadow{
    border: none;
    box-shadow: 0 0 3px 1px black;
}
.link{
    text-decoration: none;
    color: gray;
}
.link:hover{
    color: red;
}
.link.link-btn{
    border: 1px solid gray;
   border-radius: 5px;
    padding: 0.5em;
    display: inline-block;
    background-color: #EEEEEE;
}
.link.link-btn:hover{
    border: 1px solid black;
    background-color: #DDDDDD;
    color: black;

}
.pagination{
    text-align: center;
    white-space: nowrap;
    overflow: hidden;
}

.pagination > a {
    color: black;
    text-decoration: none;

    display: inline-block;
    min-width:2em;

    padding: 0.3em;
    text-align: center;
    border: 1px solid black;
}
.pagination >a:hover,
    .pagination > a.active{
    color: red;
    border-color: red;
}
.form-input {
    /* outline은 선택 시 자동으로 생기는 테두리이다 */
    outline: none;
    padding: 0.5em;
    border: 1px solid #b2bec3;
}
/*
    :focus 는 해당 태그에 포커스가 맞춰진 경우 실행되는 조건부 선택자
    = 입력창은 커서가 위치하면 포커스가 맞춰졌다고 본다
*/
.form-input:focus {
    border-color: black;
}

.fill {
    width:100%;
}

/* 확장 스타일 : 밑줄만 있는 입력창 */
.form-input.input-underline {
    border-top: none;
    border-left: none;
    border-right:none;
}

/* 확장 스타일 : 배경이미지가 좌측에 삽입되는 입력창 */
.form-input.input-image {
    padding-left: 2.5em;

    /* 
        배경 이미지는 url 함수로 설정하며, 상대경로밖에 지정할 수 없다(css 코드가 작성된 파일 기준)
        배경은 기본적으로 반복해서 배치되게 되어 있다.
    */
    /* background-image: url("./image/lock.jpg"); */
    background-size: 1.5em;
    background-repeat: no-repeat;
    background-position: left 0.5em center;
}

/* 확장 스타일 : 모서리가 둥근 입력창 */
.form-input.input-round {
    border-radius: 0.25em;
}

/* textarea 폭 조절 금지 */
textarea.form-input {
    resize: vertical;
}

/* 번외편 : 체크가 된 경우와 안된 경우를 구분해서 스타일 부여 */

/* 체크박스 바로 뒤(+)에 있는 라벨의 스타일을 정의 */
input[type=checkbox] + label {
    color:red;
}
/* :checked 는 체크가 된 상태를 선택하는 조건부 선택자 */
input[type=checkbox]:checked + label {
    color:blue;
}

input[name=keyword] {
    background-image: url("./image/search.jpg");
}
input[name=password] {
    background-image: url("./image/lock.jpg");
}
 /*
            버튼(Button)
            - 클릭할 수 있는 도구
            - 버튼의 종류는 하나가 아니다
            버튼의 구분 : 버튼의 역할을 통해 버튼 디자인을 구분한다
            - 중요한 버튼
            - 덜 중요한 버튼
            - 긍정 버튼
            - 부정 버튼
            - 위험한 버튼
            - 경고 버튼
            - 정보 버튼
            - ...
            일반 스타일 : 기본 버튼
            확장 스타일 : 중요한 버튼, 덜 중요한 버튼, 경고 버튼, 위험 버튼, 성공 버튼
        */

        .btn {
            border:1px solid gray;
            border-radius: 0.25em;
            padding:0.5em;

            color:gray;
            background-color: white;

            cursor: pointer;

            /* 어떤 속성을 inherit로 설정하면 기본값이 아니라 외부의 항목을 그대로 상속받아 쓰겠다는 의미 */
            font:inherit;
        }
        .btn:hover {
            color:black;
            border-color: black;
        }

        .btn.btn-primary {
            border-color: #0984e3;
            background-color: #0984e3;
            color:white;
        }
        .btn.btn-primary:hover {
            border-color: #0769b5;
            background-color:#0769b5;
        }

        .btn.btn-secondary {
            border-color: #636e72;
            background-color: #636e72;
            color: white;
        }
        .btn.btn-secondary:hover {
            border-color: #4f585b;
            background-color: #4f585b;
        }

        .btn.btn-success{
            border-color:#00b894;
            background-color:#00b894;
            color:white;

        }
        .btn.btn-success:hover{
            border-color:#009376;
            background-color:#009376;
        }

        .btn.btn-warning{
            border-color:#fdcb6e;
            background-color:#fdcb6e;
            color:white;
        }
        .btn.btn-warning:hover{
            border-color:#fcb126;
            background-color:#fcb126;
        }

        .btn.btn-danger{
            border-color:#d63031;
            background-color:#d63031;
            color:white;

        }
        .btn.btn-danger:hover{
            border-color:#ae2223;
            background-color:#ae2223;
        }
