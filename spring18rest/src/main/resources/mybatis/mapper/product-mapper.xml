<?xml version="1.0" encoding="UTF-8"?>

<!-- 
	mapper 파일은 특정 테이블에 대한 SQL 구문을 보관하는 파일이다
	- myBatis를 이용하는 개발자는 이곳에 저장된 SQL 구문을 "아이디"를 이용해서 호출한다
	- 파일마다 동일한 아이디로 인해 발생하는 충돌을 방지하기 위해 고유한 namespace를 사용한다 
	- 만약 namespace가 olympic이고 구문 ID가 list라면 외부에서는 olympic.list로 호출한다
	- 일반적으로 namespace는 테이블명으로 한다!
	- mapper 내부에는 다음 종류 태그로 구문을 저장할 수 있다.
		- <insert>
		- <select>
		- <update>
		- <delete>
	- 각 구문은 반드시 아이디를 가져야 한다.
	- 각 구문에는 다음과 같은 속성을 작성할 수 있다
		- parameterType : 해당 구문이 실행되기 위해 필요한 데이터의 자료형(1개만 작성 가능, 선택)
		- resultType : 해당 구문의 실행 결과를 변환하기 위한 자료형(1개만 작성 가능, 필수)
			- (주의) List이든 아니든 DTO의 형태를 작성한다(모르는 부분을 알려준다)
	- 각 구문에는 데이터를 다음과 같이 바인딩할 수 있다
		- 정적 바인딩 : ${이름} 형태로 작성하면 어떠한 추가 작업도 없이 해당 위치에 데이터가 그대로 작성된다
		- 동적 바인딩 : #{이름} 형태로 작성하면 자동으로 자료형에 맞게 해당 데이터를 추출하여 작성해준다(DTO 변수명)
 -->

<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="product">

	<!-- 등록 -->
	<select id="sequence" resultType="int">
		select product_seq.nextval from dual
	</select>
	<insert id="insert" parameterType="ProductDto">
		insert into product(no, name, type, price, made, expire)
		values(
			#{no}, #{name}, #{type}, #{price},
			to_date(#{made}, 'YYYY-MM-DD'),
			to_date(#{expire}, 'YYYY-MM-DD')
		)
	</insert>

	<!--  복합 검색 -->
	<select id="list" resultType="ProductDto" parameterType="ProductSearchVO">
		<bind name="noExist" value="no != 0"/>
		<bind name="nameExist" value="name != null and !name.equals('')"/>
		<bind name="typeExist" value="types != null and !types.isEmpty()"/>
		<bind name="minPriceExist" value="minPrice > 0"/>
		<bind name="maxPriceExist" value="maxPrice > 0 and maxPrice > minPrice"/>
		<bind name="beginMadeExist" value="beginMade != null and !beginMade.equals('')"/>
		<bind name="endMadeExist" value="endMade != null and !endMade.equals('')"/>
		<bind name="beginExpireExist" value="beginExpire != null and !beginExpire.equals('')"/>
		<bind name="endExpireExist" value="endExpire != null and !endExpire.equals('')"/>

		select * from product
		<where>
			<if test="noExist"> no = #{no} </if>
		</where>


	</select>

	<!-- 항목 검색 -->
	<select id="search" resultType="ProductDto" parameterType="Map">
		select * from product 
		where instr(${type}, #{keyword}) > 0
		order by ${type} asc
	</select>

	<!-- 단일 조회 -->
	<select id="one" resultType="ProductDto" parameterType="int">
		select * from product where no = #{no}
	</select>

	<!-- 수정 - 존재하는 항목만 수정하도록 처리(번호는 반드시 있어야 함) -->	
	<update id="edit" parameterType="ProductDto">
		<bind name="nameExist" value="name != null and !name.equals('')"/>
		<bind name="typeExist" value="type != null and !type.equals('')"/>
		<bind name="priceExist" value="price != null and price > 0"/>
		<bind name="madeExist" value="made != null and !made.equals('')"/>
		<bind name="expireExist" value="expire != null and !expire.equals('')"/>

		update product
		<set>
			<if test="nameExist">name = #{name},</if>
			<if test="typeExist">type = #{type},</if>
			<if test="priceExist">price = #{price},</if>
			<if test="madeExist">made = to_date(#{made}, 'YYYY-MM-DD'),</if>
			<if test="expireExist">expire = to_date(#{expire}, 'YYYY-MM-DD'),</if>
		</set>
		where no = #{no}
	</update>

	<delete id="delete" parameterType="int">
		delete product where no = #{no}
	</delete>

</mapper> 
